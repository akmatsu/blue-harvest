name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
  EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
  AWS_DEPLOYER_ROLE_ARN: ${{ secrets.AWS_DEPLOYER_ROLE_ARN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          echo APP_NAME=Laravel >> .env
          echo APP_ENV=PRODUCTION >> .env
          echo APP_KEY=${{ secrets.LARAVEL_APP_KEY }} >> .env
          echo APP_DEBUG=false >> .env
          echo APP_TIMEZONE=UTC >> .env
          echo APP_LOCALE=en >> .env
          echo APP_FALLBACK_LOCALE=en >> .env
          echo APP_FAKER_LOCALE=en_US >> .env
          echo APP_MAINTENANCE_DRIVER=file >> .env
          echo APP_MAINTENANCE_STORE=database >> .env
          echo BCRYPT_ROUNDS=12 >> .env
          echo LOG_CHANNEL=stack >> .env
          echo LOG_STACK=single >> .env
          echo LOG_DEPRECATIONS_CHANNEL=null >> .env
          echo LOG_LEVEL=debug >> .env
          echo DB_CONNECTION=mysql >> .env
          echo DB_HOST=${{ secrets.AWS_RDS_HOST }} >> .env
          echo DB_PORT=3306 >> .env
          echo DB_DATABASE=${{ secrets.AWS_RDS_NAME }}} >> .env
          echo DB_USERNAME=${{ secrets.AWS_RDS_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.AWS_RDS_PASSWORD }} >> .env
          echo SESSION_DRIVER=database >> .env
          echo SESSION_LIFETIME=120 >> .env
          echo SESSION_ENCRYPT=false >> .env
          echo SESSION_PATH=/ >> .env
          echo SESSION_DOMAIN=null >> .env
          echo BROADCAST_CONNECTION=log >> .env
          echo FILESYSTEM_DISK=local >> .env
          echo QUEUE_CONNECTION=database >> .env
          echo CACHE_STORE=database >> .env
          echo CACHE_PREFIX= >> .env
          echo MEMCACHED_HOST=127.0.0.1 >> .env
          echo REDIS_CLIENT=phpredis >> .env
          echo REDIS_HOST=127.0.0.1 >> .env
          echo REDIS_PASSWORD=null >> .env
          echo REDIS_PORT=6379 >> .env
          echo MAIL_MAILER=log >> .env
          echo MAIL_HOST=127.0.0.1 >> .env
          echo MAIL_PORT=2525 >> .env
          echo MAIL_USERNAME=null >> .env
          echo MAIL_PASSWORD=null >> .env
          echo MAIL_ENCRYPTION=null >> .env
          echo MAIL_FROM_ADDRESS="hello@example.com" >> .env
          echo MAIL_FROM_NAME="${APP_NAME}" >> .env
          echo AWS_ACCESS_KEY_ID= >> .env
          echo AWS_SECRET_ACCESS_KEY= >> .env
          echo AWS_DEFAULT_REGION=us-east-1 >> .env
          echo AWS_BUCKET= >> .env
          echo AWS_USE_PATH_STYLE_ENDPOINT=false >> .env
          echo VITE_APP_NAME="${APP_NAME}" >> .env
          echo SCOUT_DRIVER=typesense >> .env
          echo TYPESENSE_API_KEY=${{ secrets.TYPESENSE_API_KEY }} >> .env
          echo TYPESENSE_HOST=localhost >> .env
          echo TYPESENSE_PORT=8108 >> .env
          echo TYPESENSE_PATH= >> .env
          echo TYPESEN_PROTOCOL=http >> .env
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: freedomsmb/blueharvest:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_DEPLOYER_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      - name: Initialize Elastic Beanstalk
        run: |
          eb init -p docker "${{ env.EB_APP_NAME }}" --region ${{ env.AWS_REGION }}

      - name: Create or Deploy to Elastic Beanstalk
        run: |
          if eb list | grep -q ${{ env.EB_ENV_NAME }}; then
            eb deploy ${{ env.EB_ENV_NAME }}
          else
            eb create ${{ env.EB_ENV_NAME }} --cfg default --timeout 15 --platform "docker-compose"
          fi
